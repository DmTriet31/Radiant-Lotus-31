const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, ComponentType } = require('discord.js');
const fs = require('fs');
const path = require('path');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('domin')
        .setDescription('Ch∆°i game m·ªü h·ªôp qu√† v·ªõi c∆° h·ªôi nh·∫≠n Radiant Coins'),

    async execute(interaction) {
        const gameBoard = [];
        for (let i = 0; i < 20; i++) {
            const random = Math.random();
            if (random < 0.35) gameBoard.push('üí£');        // 35% l√† bom
            else if (random < 0.65) gameBoard.push('üí∏');   // 30% l√† coin
            else gameBoard.push('ü©∑');                      // 35% l√† heal/tim
        }

        const displayBoard = Array(20).fill('üéÅ');
        const userId = interaction.user.id;

        const createGameEmbed = (message = '') => {
            const embed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle('üéÆ Domin Game')
                .setDescription(`${message}\n\nCh·ªçn m·ªôt h·ªôp qu√† ƒë·ªÉ m·ªü:`)
                .setFooter({ text: `Game c·ªßa ${interaction.user.username}` });

            let boardDisplay = '';
            for (let i = 0; i < 20; i++) {
                boardDisplay += displayBoard[i] + ' ';
                if ((i + 1) % 5 === 0) boardDisplay += '\n';
            }

            embed.addFields({ name: 'B·∫£ng Game', value: boardDisplay });
            return embed;
        };

        const createButtons = () => {
            const rows = [];
            for (let i = 0; i < 4; i++) {
                const row = new ActionRowBuilder();
                for (let j = 0; j < 5; j++) {
                    const index = i * 5 + j;
                    row.addComponents(
                        new ButtonBuilder()
                            .setCustomId(`domin_${index}`)
                            .setLabel(`${index + 1}`)
                            .setStyle(ButtonStyle.Secondary)
                            .setDisabled(displayBoard[index] !== 'üéÅ')
                    );
                }
                rows.push(row);
            }
            return rows;
        };

        const updateYuriCoin = (userId, amount) => {
            const filePath = path.join(__dirname, '../data/money.json');
            try {
                let moneyData = {};
                if (fs.existsSync(filePath)) {
                    const fileContent = fs.readFileSync(filePath, 'utf8');
                    moneyData = JSON.parse(fileContent);
                }

                if (!moneyData[userId]) moneyData[userId] = 0;
                moneyData[userId] += amount;

                fs.writeFileSync(filePath, JSON.stringify(moneyData, null, 2));
                return moneyData[userId];
            } catch (error) {
                console.error('L·ªói khi c·∫≠p nh·∫≠t ti·ªÅn:', error);
                return null;
            }
        };

        let coinsEarned = 0;

        const gameMessage = await interaction.reply({
            embeds: [createGameEmbed()],
            components: createButtons(),
            fetchReply: true
        });

        const collector = gameMessage.createMessageComponentCollector({
            componentType: ComponentType.Button,
            time: 60000
        });

        collector.on('collect', async i => {
            if (i.user.id !== userId) {
                return i.reply({ content: 'ƒê√¢y kh√¥ng ph·∫£i l∆∞·ª£t ch∆°i c·ªßa b·∫°n!', ephemeral: true });
            }

            const index = parseInt(i.customId.split('_')[1]);
            const result = gameBoard[index];
            displayBoard[index] = result;

            let message = '';
            if (result === 'üí£') {
                message = `üí• B·∫°n ƒë√£ m·ªü ph·∫£i bom! Tr√≤ ch∆°i k·∫øt th√∫c!\nüëâ T·ªïng coin ki·∫øm ƒë∆∞·ª£c: **${coinsEarned}** üí∏`;
                updateYuriCoin(userId, coinsEarned);
                collector.stop('hit_bomb');
            } else if (result === 'üí∏') {
                coinsEarned += 10;
                message = `üéâ B·∫°n nh·∫≠n ƒë∆∞·ª£c 10 Radiant Coins!\nüëâ T·ªïng coin hi·ªán t·∫°i: **${coinsEarned}** üí∏`;
            } else {
                message = `üíñ B·∫°n nh·∫≠n ƒë∆∞·ª£c m·ªôt tr√°i tim! Ti·∫øp t·ª•c n√†o!`;
            }

            await i.update({
                embeds: [createGameEmbed(message)],
                components: createButtons()
            });
        });

        collector.on('end', async (_, reason) => {
            if (reason !== 'hit_bomb') {
                updateYuriCoin(userId, coinsEarned);
                await interaction.editReply({
                    embeds: [createGameEmbed(`‚è≥ Tr√≤ ch∆°i k·∫øt th√∫c do h·∫øt th·ªùi gian!\nüëâ T·ªïng coin ki·∫øm ƒë∆∞·ª£c: **${coinsEarned}** üí∏`)],
                    components: []
                });
            }
        });
    }
};
