const {
  SlashCommandBuilder,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder
} = require('discord.js');

const gameRanks = {
  lienquan: ['Chi·∫øn t∆∞·ªõng', 'Cao th·ªß', 'Tinh anh', 'Kim c∆∞∆°ng', 'B·∫°ch kim', 'V√†ng', 'B·∫°c', 'ƒê·ªìng', 'Kh√¥ng rank', 'ƒê·∫•u th∆∞·ªùng'],
  freefire: ['Th√°ch ƒë·∫•u', 'Huy·ªÅn tho·∫°i', 'Tinh nhu·ªá', 'Kim c∆∞∆°ng', 'B·∫°ch kim', 'V√†ng', 'B·∫°c', 'ƒê·ªìng', 'Kh√¥ng rank', 'Ch·∫ø ƒë·ªô th∆∞·ªùng'],
  pubg: ['Th·ªëng lƒ©nh', 'T·ªëi th∆∞·ª£ng', 'Kim c∆∞∆°ng', 'B·∫°ch kim', 'V√†ng', 'B·∫°c', 'ƒê·ªìng', 'Kh√¥ng rank', 'Classic'],
  val: ['Radiant', 'Immortal', 'Ascendant', 'Diamond', 'Platinum', 'Gold', 'Silver', 'Bronze', 'Iron', 'Unranked'],
  csgo: ['Global Elite', 'Supreme Master', 'Legendary Eagle Master', 'Legendary Eagle', 'Distinguished Master Guardian', 'Master Guardian', 'Gold Nova', 'Silver', 'Ch∆∞a x·∫øp h·∫°ng', 'Ch∆°i th∆∞·ªùng'],
  tft: ['Th√°ch ƒë·∫•u', 'Cao th·ªß', 'ƒê·∫°i cao th·ªß', 'Kim c∆∞∆°ng', 'B·∫°ch kim', 'V√†ng', 'B·∫°c', 'ƒê·ªìng', 'S·∫Øt', 'Ch∆∞a x·∫øp h·∫°ng'],
  roblox: ['Chuy√™n gia Simulator', 'Master Obby', 'Vua Roleplay', 'Tryhard FPS', 'ƒê·∫°i gia Tycoon', 'Kh√¥ng ph√¢n lo·∫°i']
};

const allRanks = [...new Set(Object.values(gameRanks).flat())];

module.exports = {
  data: new SlashCommandBuilder()
    .setName('game')
    .setDescription('T·∫°o tin tuy·ªÉn ng∆∞·ªùi ch∆°i cho nhi·ªÅu t·ª±a game')
    .addStringOption(option =>
      option.setName('game')
        .setDescription('Ch·ªçn game mu·ªën tuy·ªÉn')
        .setRequired(true)
        .addChoices(
          { name: 'Li√™n Qu√¢n', value: 'lienquan' },
          { name: 'Free Fire', value: 'freefire' },
          { name: 'PUBG', value: 'pubg' },
          { name: 'Valorant', value: 'val' },
          { name: 'CS:GO', value: 'csgo' },
          { name: 'ƒê·∫•u Tr∆∞·ªùng Ch√¢n L√Ω', value: 'tft' },
          { name: 'Roblox', value: 'roblox' }
        )
    )
    .addStringOption(option =>
      option.setName('rank')
        .setDescription('Ch·ªçn rank ph√π h·ª£p v·ªõi game')
        .setRequired(true)
        .addChoices(...allRanks.map(rank => ({ name: rank, value: rank })))
    )
    .addStringOption(option =>
      option.setName('msg')
        .setDescription('N·ªôi dung tin nh·∫Øn tuy·ªÉn ng∆∞·ªùi')
        .setRequired(true)
    ),

  async execute(interaction) {
    const game = interaction.options.getString('game');
    const rank = interaction.options.getString('rank');
    const msg = interaction.options.getString('msg');
    const member = interaction.member;
    const voiceChannel = member.voice?.channel;

    const validRanks = gameRanks[game];
    if (!validRanks.includes(rank)) {
      return await interaction.reply({
        content: `‚ùå Rank **${rank}** kh√¥ng h·ª£p l·ªá cho game **${game}**`,
        ephemeral: true
      });
    }

    let roomName = '‚ùå Kh√¥ng ·ªü trong voice channel';
    let slot = '0/0';

    if (voiceChannel) {
      const memberCount = voiceChannel.members.size;
      const userLimit = voiceChannel.userLimit;
      slot = `${memberCount}/${userLimit === 0 ? 'Kh√¥ng gi·ªõi h·∫°n' : userLimit}`;
      roomName = voiceChannel.name;
    }

    const colors = {
      lienquan: 0x00AAFF,
      freefire: 0xFF4500,
      pubg: 0xDAA520,
      val: 0xFF2D55,
      csgo: 0x4B92DB,
      tft: 0x9147FF,
      roblox: 0xFFD700
    };

    const embed = new EmbedBuilder()
      .setColor(colors[game] || 0x2F3136)
      .setAuthor({
        name: `${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      })
      .addFields(
        { name: 'Game', value: game.toUpperCase(), inline: true },
        { name: 'Ph√≤ng voice', value: roomName, inline: true },
        { name: 'Slot', value: slot, inline: true },
        { name: 'Rank', value: rank, inline: true }
      )
      .setFooter({ text: `S·ª≠ d·ª•ng: /game game: [game] rank: [rank] msg: [n·ªôi dung]` });

    const joinButton = new ButtonBuilder()
      .setCustomId(JSON.stringify({ cmd: 'join_voice', vc: voiceChannel?.id || null }))
      .setLabel('üîä Tham gia voice')
      .setStyle(ButtonStyle.Primary)
      .setDisabled(!voiceChannel);

    const row = new ActionRowBuilder().addComponents(joinButton);

    await interaction.reply({
      content: `${interaction.user} ${msg}`,
      embeds: [embed],
      components: [row]
    });
  }
};
