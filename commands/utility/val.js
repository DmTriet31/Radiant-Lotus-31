module.exports = {
  data: new SlashCommandBuilder()
    .setName('val')
    .setDescription('T·∫°o tin tuy·ªÉn ng∆∞·ªùi ch∆°i v·ªõi rank c·ª• th·ªÉ')
    .addStringOption(option =>
      option.setName('rank')
        .setDescription('Ch·ªçn rank')
        .setRequired(true)
        .addChoices(...rankChoices.map(rank => ({ name: rank, value: rank })))),
    .addStringOption(option =>
      option.setName('msg')
        .setDescription('N·ªôi dung tin nh·∫Øn')
        .setRequired(true)),

  async execute(interaction) {
    const msg = interaction.options.getString('msg');
    const rank = interaction.options.getString('rank');
    const member = interaction.member;
    const voiceChannel = member.voice?.channel;
    const roomName = voiceChannel ? voiceChannel.name : '‚ùå Kh√¥ng ·ªü trong voice channel';

    // T√¨m s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i (bao g·ªìm c·∫£ gi√° tr·ªã +X)
    const playerCountMatch = msg.match(/([+-]?\d+)/);
    const playerCount = playerCountMatch ? parseInt(playerCountMatch[1]) : 2;  // M·∫∑c ƒë·ªãnh l√† 2 n·∫øu kh√¥ng c√≥ s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i

    // C·∫≠p nh·∫≠t Slot t√πy theo s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i
    const slotValue = `${playerCount}/Unlimited`;

    const embed = new EmbedBuilder()
      .setColor(0xAA00FF)
      .setAuthor({
        name: `${interaction.user.username}`,  // Ch·ªâ hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng m√† kh√¥ng c√≥ th√™m message
        iconURL: interaction.user.displayAvatarURL()
      })
      .addFields(
        { name: 'Room', value: roomName, inline: true },
        { name: 'Slot', value: slotValue, inline: true },
        { name: 'Rank', value: rank.toUpperCase(), inline: true }
      )
      .setFooter({ text: 'C√°ch s·ª≠ d·ª•ng: /val rank: [rank] msg: [msg]' });

    const joinButton = new ButtonBuilder()
      .setCustomId(JSON.stringify({ cmd: 'join_voice', vc: voiceChannel?.id || null }))
      .setLabel('üîä Join Voice')
      .setStyle(ButtonStyle.Primary)
      .setDisabled(!voiceChannel);

    const row = new ActionRowBuilder().addComponents(joinButton);

    await interaction.reply({
      content: `${interaction.user}`,
      embeds: [embed],
      components: [row]
    });
  }
};
