const {
  SlashCommandBuilder,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder
} = require('discord.js');

const rankChoices = [
  'Th√°ch ƒë·∫•u', 'Cao th·ªß', 'ƒê·∫°i cao th·ªß', 'Kim c∆∞∆°ng',
  'B·∫°ch kim', 'V√†ng', 'B·∫°c', 'ƒê·ªìng', 'S·∫Øt',
  'Ch∆∞a x·∫øp h·∫°ng'
];

module.exports = {
  data: new SlashCommandBuilder()
    .setName('tft')
    .setDescription('T·∫°o tin tuy·ªÉn ng∆∞·ªùi ch∆°i ƒê·∫•u Tr∆∞·ªùng Ch√¢n L√Ω (TFT)')
    .addStringOption(option =>
      option.setName('rank')
        .setDescription('Ch·ªçn rank TFT')
        .setRequired(true)
        .addChoices(...rankChoices.map(rank => ({ name: rank, value: rank })))
    )
    .addStringOption(option =>
      option.setName('msg')
        .setDescription('N·ªôi dung tin nh·∫Øn tuy·ªÉn')
        .setRequired(true)
    ),

  async execute(interaction) {
    const msg = interaction.options.getString('msg');
    const rank = interaction.options.getString('rank');
    const member = interaction.member;
    const voiceChannel = member.voice?.channel;

    // X·ª≠ l√Ω th√¥ng tin ph√≤ng v√† slot
    let roomName = '‚ùå Kh√¥ng ·ªü trong voice channel';
    let slot = '0/0';
    let row = null;
    let invite = null;

    const embed = new EmbedBuilder()
      .setColor(0x9147FF)
      .setAuthor({
        name: `${interaction.user.username}`,
        iconURL: interaction.user.displayAvatarURL()
      })
      .setFooter({ text: 'S·ª≠ d·ª•ng: /tft rank: [rank] msg: [n·ªôi dung tuy·ªÉn]' });

    if (voiceChannel) {
      const memberCount = voiceChannel.members.size;
      const userLimit = voiceChannel.userLimit;
      slot = `${memberCount}/${userLimit === 0 ? 'Kh√¥ng gi·ªõi h·∫°n' : userLimit}`;
      roomName = voiceChannel.name;

      // T·∫°o invite t·∫°m th·ªùi
      invite = await voiceChannel.createInvite({
        maxAge: 300, // Invite h·∫øt h·∫°n sau 5 ph√∫t
        maxUses: 1,  // Ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng 1 l·∫ßn
        temporary: true // Ng∆∞·ªùi d√πng s·∫Ω b·ªã kick ra n·∫øu kh√¥ng c√≥ role khi r·ªùi server
      });

      // T·∫°o n√∫t tham gia voice channel
      const joinButton = new ButtonBuilder()
        .setLabel(`üîä Tham gia: ${voiceChannel.name}`)
        .setStyle(ButtonStyle.Link)
        .setURL(invite.url);

      row = new ActionRowBuilder().addComponents(joinButton);
    }

    embed.addFields(
      { name: 'Ph√≤ng voice', value: roomName, inline: true },
      { name: 'Slot', value: slot, inline: true },
      { name: 'Rank', value: rank, inline: true }
    );

    await interaction.reply({
      content: `${interaction.user} ${msg}`,
      embeds: [embed],
      components: row ? [row] : []
    });

    // L·∫Øng nghe s·ª± ki·ªán r·ªùi voice channel
    if (voiceChannel && invite) {
      const filter = (oldState, newState) =>
        newState.member.id === interaction.user.id &&
        oldState.channelId === voiceChannel.id &&
        !newState.channelId;

      const collector = voiceChannel.createDisconnectCollector({ filter, time: 60000 });

      collector.on('collect', async () => {
        await invite.delete().catch(() => {});
        console.log(`ƒê√£ x√≥a invite v√¨ ng∆∞·ªùi d√πng r·ªùi kh·ªèi voice channel.`);
      });
    }
  }
};
