const client = require('./main'); // client ƒë√£ ƒë∆∞·ª£c t·∫°o v√† login trong main.js
require('./bot');
require('./shiva');

const loadEventHandlers = () => {
    const colors = require('./UI/colors/colors');

    const logSystem = (system, status = '‚úÖ') => {
        const timestamp = new Date().toLocaleTimeString();
        console.log(
            `${colors.gray}[${timestamp}]${colors.reset}`,
            `${colors.cyan}[${system.padEnd(15)}]${colors.reset}`,
            `${colors.green}${status}${colors.reset}`
        );
    };

    console.clear();
    console.log('\n' + '‚ïê'.repeat(60));
    console.log(`${colors.yellow}${colors.bright}             ü§ñ BOT SYSTEMS INITIALIZATION ü§ñ${colors.reset}`);
    console.log('‚ïê'.repeat(60) + '\n');

    // CORE SYSTEMS
    require('./events/guildMemberAdd')(client); logSystem('WELCOME');
    require('./events/ticketHandler')(client); logSystem('TICKET');
    require('./events/voiceChannelHandler')(client); logSystem('VOICE');

    // ENGAGEMENT SYSTEMS
    require('./events/giveaway')(client); logSystem('GIVEAWAY');
    require('./events/autorole')(client); logSystem('AUTOROLE');
    require('./events/reactionroles')(client); logSystem('REACTION ROLES');

    // EMOJI & AFK
    require('./events/nqn')(client); logSystem('NQN');
    require('./events/emojiHandler')(client); logSystem('EMOJI');
    require('./events/afkHandler')(client); logSystem('AFK');

    // NOTIFICATIONS
    require('./events/youTubeHandler')(client); logSystem('YOUTUBE');
    require('./events/twitchHandler')(client); logSystem('TWITCH');
    require('./events/facebookHandler')(client); logSystem('FACEBOOK');
    require('./events/instagramHandler')(client); logSystem('INSTAGRAM');

    // MUSIC
    require('./events/music')(client); logSystem('LAVALINK MUSIC');

    console.log('\n' + '‚ïê'.repeat(60));
    console.log(`${colors.green}${colors.bright}             ‚ú® ALL SYSTEMS INITIALIZED ‚ú®${colors.reset}`);
    console.log('‚ïê'.repeat(60) + '\n');
};

// KH√îNG G·ªåI client.login(token) ·ªü ƒë√¢y!

client.on('ready', () => {
    console.log(`ƒê√£ ƒëƒÉng nh·∫≠p d∆∞·ªõi t√™n: ${client.user.tag}`);
    loadEventHandlers();
});

// G·ªòP T·∫§T C·∫¢ interactionCreate l·∫°i l√†m 1 ch·ªó
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    let data;
    try {
        data = JSON.parse(interaction.customId);
    } catch (e) {
        data = { cmd: interaction.customId };
    }

    // JOIN VOICE
    if (data.cmd === 'join_voice') {
        const member = interaction.member;
        const vcId = data.vc;
        const voiceChannel = interaction.guild.channels.cache.get(vcId);

        if (!voiceChannel || voiceChannel.type !== 2) {
            return interaction.reply({ content: '‚ùå Voice channel kh√¥ng h·ª£p l·ªá.', ephemeral: true });
        }

        try {
            await member.voice.setChannel(voiceChannel);
            await interaction.reply({ content: `‚úÖ ƒê√£ ƒë∆∞a b·∫°n v√†o voice **${voiceChannel.name}**!`, ephemeral: true });
        } catch (err) {
            console.error(err);
            await interaction.reply({ content: '‚ùå Kh√¥ng th·ªÉ ƒë∆∞a b·∫°n v√†o voice.', ephemeral: true });
        }
    }

    // MUA H√ÄNG
    if (data.cmd === 'buy_spotify') {
        return interaction.reply('C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn mua **Spotify Premium**!');
    } else if (data.cmd === 'buy_netflix') {
        return interaction.reply('C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn mua **Netflix Share**!');
    } else if (data.cmd === 'buy_ao') {
        return interaction.reply('C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn mua **√Åo Thun**!');
    }
});